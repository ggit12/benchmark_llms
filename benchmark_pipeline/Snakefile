"""
Snakefile for benchmark_pipeline. Limits concurrent models per provider to 1.

To add a new model for an existing provider, just add it to ENDPOINTS in providers.py.
"""
# pylint: disable=syntax-error

import os
import sys
from itertools import product
import glob

from dotenv import load_dotenv
load_dotenv()

source_dir = os.environ["SOURCE_DIR"]
sys.path.append(source_dir)

from src import PROVIDERS, ENDPOINTS

# Number of benchmark runs to perform
N_RUNS = int(os.environ["N_RUNS"])

# Define run directories
RUN_DIRS = [f"run_{i+1}" for i in range(N_RUNS)]

# Define a global resource limit for each provider
for provider in ENDPOINTS.endpoints.keys():
    workflow.global_resources[f"provider_{provider}"] = 1

# Main rule to generate all outputs including aggregated results
rule all:
    input:
        #Where rules have multiple outputs, only the last output is used
        # Original outputs for each run
        # ------------------------------
        #to trigger o1, o2, o3, o4, o5, o8, o9
        expand("res/{run}/res/09_figure_5/confusion_matrix_for_cells_topleft_of_agreement.svg", run=RUN_DIRS),
        #to trigger o6
        expand("res/{run}/res/06_figure_s1/done", run=RUN_DIRS),
        #to trigger o6b
        expand("res/{run}/res/06b_figure_s3/agreement_table_by_tissue_perfect_only.pkl", run=RUN_DIRS),
        #to trigger o7
        expand("res/{run}/res/07_figure_3_and_s2/agreement_plots_by_tissue_celltype_top_celltypes_done", run=RUN_DIRS),
        # These files below won't run unless on the bigger object
        expand("res/{run}/res/07_figure_3_and_s2/stromal_module_umap_in_stromal_cells.svg", run=RUN_DIRS),

        # Final aggregated results
        # -------------------------
        #to trigger o10
        "res/10_aggregated_tables/aggregated_performance_table.html",

        #to trigger o11
        "res/11_aggregated_kappa/kappa_sd.svg",

        #to trigger o12
        "res/12_aggregated_agreement_plots/agreement_plot_categorical_unweighted.svg",

        #to trigger o13
        "res/13_aggregated_plots_largest_celltypes/agreement_plot_largest_celltypes_perfect_only.svg",

        #to trigger o14
        "res/14_extract_DEGs/DEG_frequencies.txt",

        #to trigger o15
        "res/15_aggregated_plots_tissue/agreement_plot_by_tissue_perfect_only.svg",


# Preprocess rule - only run once
rule o1_preprocess_data:
    input:
        os.environ["INPUT_DATA"]
    output:
        directory("dat/preprocessed_tissue_adt"),
        'dat/manual_cell_type_col.pkl',
    resources: # sbatch flag to which snakemake maps
        slurm_partition="cpu", # --partition
        mem="800G", # --mem
        # cpus=30, # --cpus-per-task
        runtime=240, # --time
        tasks=1, # --ntasks
    shell:
        "python scripts/01_preprocess_data.py"

def make_existing_provider_pkls(run_dir, provider):
    """
    Return a list of any existing PKLs for the given run_dir and provider.
    """
    pattern = f"res/{run_dir}/res/02_run_provider/{provider}_*.pkl"
    return glob.glob(pattern)

# Define rules for each run
for run_dir in RUN_DIRS:
    # Provider rules for each run
    for provider in ENDPOINTS.endpoints.keys():

        # This rule is a snakemake workaround to persist valid outputs from previously run models and avoid having one rule per provider-model
        rule:
            name: f"cache_previous_o2_{provider}_{run_dir}"
            output:
                temp(f"res/{run_dir}/res/02_run_provider/{provider}_cache_done")
            params:
                provider=provider,
                run=run_dir,
            shell:
                """
                # Create cache directory
                mkdir -p res/{params.run}/res/02_run_provider/cached_outputs/

                # Move existing pkl files to cache directory (and catch error if no files exist)
                mv res/{params.run}/res/02_run_provider/{params.provider}_*.pkl res/{params.run}/res/02_run_provider/cached_outputs/  2>/dev/null || true

                # Create done marker
                touch {output}
                """

        rule:
            name: f"o2_run_{provider}_{run_dir}"
            input:
                "dat/preprocessed_tissue_adt",  # Use the same preprocessed data for all runs
                f"res/{run_dir}/res/02_run_provider/{provider}_cache_done"  # Depend on cache rule
            output:
                expand("res/{run}/res/02_run_provider/{provider}_{model}.pkl", 
                       run=run_dir, provider=provider, model=ENDPOINTS.endpoints[provider])
            resources:
                slurm_partition="cpu",
                mem_mb=600000,
                # cpus=30,
                runtime=480,
                ntasks=1,
                **{f"provider_{provider}": 1}, # limit to 1 concurrent job per provider
            params:
                provider=provider,
                run=run_dir,
            shell:
                """
                mkdir -p res/{params.run} && \
                cd res/{params.run} && \
                python ../../scripts/02_run_provider.py --provider {params.provider} --input ../../dat/preprocessed_tissue_adt --outdir res/02_run_provider
                """

    # Gather results for all providers and models
    rule:
        name: f"o3_gather_results_{run_dir}"
        input:
            [f"res/{run_dir}/res/02_run_provider/{provider}_{model}.pkl" 
                    for provider, models in ENDPOINTS.endpoints.items()
                    for model in models]
        output:
            f'res/{run_dir}/res/03_gather_results/adt_de_novo_llm_annotated.h5ad'
        resources:
            slurm_partition="cpu",
            mem_mb=800000,
            # cpus=30,
            runtime=300,
            ntasks=1,
        params:
            run=run_dir,
        shell:
            """
            cd res/{params.run} && python ../../scripts/03_gather_results.py
            """

    # Postprocess the results
    rule:
        name: f"o4_postprocess_results_{run_dir}"
        input:
            f'res/{run_dir}/res/03_gather_results/adt_de_novo_llm_annotated.h5ad'
        output:
            f'res/{run_dir}/res/04_postprocess_results/adt_de_novo_llm_annotated.h5ad',
            f'res/{run_dir}/res/04_postprocess_results/label_map_with_manual.pkl',
            f'res/{run_dir}/res/04_postprocess_results/label_agreement_binary.pkl',
            f'res/{run_dir}/res/04_postprocess_results/label_agreement_categorical.pkl',
            f'res/{run_dir}/res/04_postprocess_results/llm_celltype_cols.pkl',
            f'res/{run_dir}/res/04_postprocess_results/binary_agreement_cols.pkl',
            f'res/{run_dir}/res/04_postprocess_results/categorical_agreement_cols.pkl',
            f'res/{run_dir}/res/04_postprocess_results/perfect_only_categorical_agreement_cols.pkl',
        resources:
            slurm_partition="gpu",
            gpu=1,
            mem="600G",
            runtime=300,
            ntasks=1,
            **{f"provider_{os.environ["PROVIDER_FOR_POST_PROCESSING"]}": 1} # limit to 1 concurrent job per provider
        params:
            run=run_dir,
        shell:
            """
            cd res/{params.run} && python ../../scripts/04_postprocess_results.py
            """
    
    rule:
        name: f"o4b_direct_string_comparison_{run_dir}"
        input:
            f'res/{run_dir}/res/04_postprocess_results/adt_de_novo_llm_annotated.h5ad',
            f'res/{run_dir}/res/04_postprocess_results/llm_celltype_cols.pkl',
        output:
            f'res/{run_dir}/res/04_postprocess_results/adt_de_novo_llm_annotated.h5ad',
            f'res/{run_dir}/res/04_postprocess_results/direct_string_agreement_cols.pkl',
        resources:
            slurm_partition="gpu",
            gpu=1,
            mem="600G",
            runtime=300,
            ntasks=1,
        params:
            run=run_dir,
        shell:
            """
            cd res/{params.run} && python ../../scripts/04b_direct_string_comparison.py
            """

    # Rule for figure 2 and table 2
    rule:
        name: f"o5_figure_2_and_table_2_{run_dir}"
        input:
            f'res/{run_dir}/res/04_postprocess_results/adt_de_novo_llm_annotated.h5ad'
        output:
            f'res/{run_dir}/res/05_figure_2_and_table_2/binary_agreement_cols_top_models.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/categorical_agreement_cols_top_models.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/perfect_only_categorical_agreement_cols_top_models.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/llm_celltype_cols_top_models.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/agreement_plot_overall_binary.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/agreement_plot_overall_binary_unweighted.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/agreement_plot_overall_categorical_perfect_only.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/agreement_plot_overall_categorical.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/agreement_plot_overall_categorical_perfect_only_unweighted.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/agreement_plot_overall_categorical_unweighted.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/agreement_plot_overall_direct_string.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/agreement_plot_overall_direct_string_unweighted.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/kappa_clustermap_overall.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/average_pairwise_kappa.svg',
            f'res/{run_dir}/res/05_figure_2_and_table_2/kappa.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/performance_table.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/performance_table.html',
        resources:
            slurm_partition="gpu",
            gpu=1,
            mem="1500G",
            runtime=300,
            ntasks=1,
        params:
            run=run_dir,
        shell:
            """
            cd res/{params.run} && python ../../scripts/05_figure_2_and_table_2.py
            """

    # Rule for figure S1
    rule:
        name: f"o6_figure_s1_{run_dir}"
        input:
            f'res/{run_dir}/res/04_postprocess_results/adt_de_novo_llm_annotated.h5ad',
            f'res/{run_dir}/res/05_figure_2_and_table_2/binary_agreement_cols_top_models.pkl'
        output:
            f"res/{run_dir}/res/06_figure_s1/done" # Uses a done file because the specific file names may change (if the top models are different) and are not used downstream
        resources:
            slurm_partition="gpu",
            gpu=1,
            mem="600G",
            cpus=30,
            runtime=60,
            ntasks=1,
        params:
            run=run_dir,
        shell:
            """
            cd res/{params.run} && python ../../scripts/06_figure_s1.py
            """

    # Rule for figure S3
    rule:
        name: f"o6b_figure_s3_{run_dir}"
        input:
            f'res/{run_dir}/res/04_postprocess_results/adt_de_novo_llm_annotated.h5ad',
            f'res/{run_dir}/res/05_figure_2_and_table_2/binary_agreement_cols_top_models.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/perfect_only_categorical_agreement_cols_top_models.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/llm_celltype_cols_top_models.pkl'
        output:
            f"res/{run_dir}/res/06b_figure_s3/agreement_plot_by_tissue.svg",
            f"res/{run_dir}/res/06b_figure_s3/agreement_table_by_tissue.pkl",
            f"res/{run_dir}/res/06b_figure_s3/agreement_plot_by_tissue_perfect_only.svg",
            f"res/{run_dir}/res/06b_figure_s3/agreement_table_by_tissue_perfect_only.pkl",
        resources:
            slurm_partition="gpu",
            gpu=1,
            mem="400G",
            cpus=30,
            runtime=60,
            ntasks=1,
        params:
            run=run_dir,
        shell:
            """
            cd res/{params.run} && python ../../scripts/06b_figure_s3.py
            """

    # Rule for figure 3 and S2
    rule:
        name: f"o7_figure_3_and_s2_{run_dir}"
        input:
            f'res/{run_dir}/res/04_postprocess_results/adt_de_novo_llm_annotated.h5ad',
            f'res/{run_dir}/res/05_figure_2_and_table_2/binary_agreement_cols_top_models.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/perfect_only_categorical_agreement_cols_top_models.pkl',
            f'res/{run_dir}/res/05_figure_2_and_table_2/llm_celltype_cols_top_models.pkl'
        output:
            f"res/{run_dir}/res/07_figure_3_and_s2/agreement_plot_largest_celltypes.svg",
            f"res/{run_dir}/res/07_figure_3_and_s2/agreement_table_largest_celltypes.pkl",
            f"res/{run_dir}/res/07_figure_3_and_s2/agreement_plot_largest_celltypes_perfect_only.svg",
            f"res/{run_dir}/res/07_figure_3_and_s2/agreement_table_largest_celltypes_perfect_only.pkl",
            f"res/{run_dir}/res/07_figure_3_and_s2/agreement_plots_by_tissue_celltype_top_celltypes_done",  # Uses a done file because the specific file names may change (if the top models are different) and are not used downstream
            f"res/{run_dir}/res/07_figure_3_and_s2/agreement_scatterplot_largest_celltypes_top_llms.svg",
            f"res/{run_dir}/res/07_figure_3_and_s2/celltypes_of_interest_large_celltypes.txt",
            # These files below won't run unless on the bigger object
            f"res/{run_dir}/res/07_figure_3_and_s2/ai_to_manual_top_left_cells_done",
            f"res/{run_dir}/res/07_figure_3_and_s2/ai_to_manual_top_left_cells_basal_cells.svg",
            f"res/{run_dir}/res/07_figure_3_and_s2/gene_module_scores_in_basal_cells.svg",
            f"res/{run_dir}/res/07_figure_3_and_s2/epithelial_module_umap_in_basal_cells.svg",
            f"res/{run_dir}/res/07_figure_3_and_s2/basal_module_umap_in_basal_cells.svg",
            f"res/{run_dir}/res/07_figure_3_and_s2/gene_module_scores_in_stromal_cells.svg",
            f"res/{run_dir}/res/07_figure_3_and_s2/granulosa_module_umap_in_stromal_cells.svg",
            f"res/{run_dir}/res/07_figure_3_and_s2/stromal_module_umap_in_stromal_cells.svg",
        resources:
            slurm_partition="gpu",
            gpu=1,
            mem="600G",
            cpus=30,
            runtime=60,
            ntasks=1,
        params:
            run=run_dir,
        shell:
            """
            cd res/{params.run} && python ../../scripts/07_figure_3_and_s2.py
            """

    # Rule for figure 4
    rule:
        name: f"o8_figure_4_{run_dir}"
        input:
            f'dat/manual_cell_type_col.pkl',
            f'res/{run_dir}/res/04_postprocess_results/adt_de_novo_llm_annotated.h5ad',
            f"res/{run_dir}/res/05_figure_2_and_table_2/llm_celltype_cols_top_models.pkl",
            f"res/{run_dir}/res/05_figure_2_and_table_2/binary_agreement_cols_top_models.pkl",
            f"res/{run_dir}/res/05_figure_2_and_table_2/categorical_agreement_cols_top_models.pkl",
            f"res/{run_dir}/res/05_figure_2_and_table_2/perfect_only_categorical_agreement_cols_top_models.pkl"
        output:
            f'res/{run_dir}/res/08_figure_4/agreement_scatterplot_overall_unweighted_unnormalized.svg',
            f'res/{run_dir}/res/08_figure_4/agreement_scatterplot_overall_weighted_normalized.svg',
            f'res/{run_dir}/res/08_figure_4/agreement_df.pkl',
            f'res/{run_dir}/res/08_figure_4/agreement_weights_df.pkl',
        resources:
            slurm_partition="gpu",
            gpu=1,
            mem="600G",
            cpus=30,
            time=120,
            ntasks=1,
        params:
            run=run_dir,
        shell:
            """
            cd res/{params.run} && python ../../scripts/08_figure_4.py
            """

    # Rule for figure 5
    rule:
        name: f"o9_figure_5_{run_dir}"
        input:
            f"res/{run_dir}/res/04_postprocess_results/adt_de_novo_llm_annotated.h5ad",
            f'res/{run_dir}/res/08_figure_4/agreement_df.pkl',
            f'res/{run_dir}/res/08_figure_4/agreement_weights_df.pkl'
        output:
            f'res/{run_dir}/res/09_figure_5/confusion_matrix_for_cells_topleft_of_agreement.svg',
            # f'res/{run_dir}/res/09_figure_5/sankey_topleft_of_agreement.svg',
            f'res/{run_dir}/res/09_figure_5/marker_gene_scores.done', # Uses a done file because the specific file names may change
            # These files below won't run unless on the bigger object
            # f'res/{run_dir}/res/09_figure_5/gene_module_scores_in_phagocytes.svg',
            # f'res/{run_dir}/res/09_figure_5/macrophage_module_umap_in_phagocytes.svg',
            # f'res/{run_dir}/res/09_figure_5/monocyte_module_umap_in_phagocytes.svg',
            # f'res/{run_dir}/res/09_figure_5/dendritic_module_umap_in_phagocytes.svg'
        resources:
            slurm_partition="gpu",
            gpu=1,
            mem="600G",
            cpus=30,
            runtime=60,
            ntasks=1,
        params:
            run=run_dir,
        shell:
            """
            cd res/{params.run} && python ../../scripts/09_figure_5.py
            """

rule o10_aggregate_tables:
    input:
        expand("res/{run_dir}/res/05_figure_2_and_table_2/performance_table.pkl", run_dir=RUN_DIRS),
    output:
        "res/10_aggregated_tables/aggregated_performance_table_mean.pkl",
        "res/10_aggregated_tables/aggregated_performance_table_std.pkl",
        "res/10_aggregated_tables/aggregated_performance_table.html",
    resources:
        slurm_partition="cpu",
        mem="32G",
        runtime=60,
        ntasks=1,
    shell:
        "python scripts/10_aggregate_tables.py --input-tables {input}"

rule o11_aggregate_kappa:
    input:
        expand("res/{run_dir}/res/05_figure_2_and_table_2/kappa.pkl", run_dir=RUN_DIRS),
    output:
        "res/11_aggregated_kappa/kappa_mean.pkl",
        "res/11_aggregated_kappa/kappa_sd.pkl",
        "res/11_aggregated_kappa/kappa_mean.svg",
        "res/11_aggregated_kappa/kappa_sd.svg",
    resources:
        slurm_partition="cpu",
        mem="32G",
        runtime=60,
        ntasks=1,
    shell:
        "python scripts/11_aggregate_kappa.py --input-kappas {input}"

rule o12_aggregate_agreement_plots:
    input:
        expand("res/{run_dir}/res/05_figure_2_and_table_2/performance_table.pkl", run_dir=RUN_DIRS),
    output:
        "res/12_aggregated_agreement_plots/agreement_plot_categorical.svg",
        "res/12_aggregated_agreement_plots/agreement_plot_categorical_unweighted.svg",
    resources:
        slurm_partition="cpu",
        mem="32G",
        runtime=60,
        ntasks=1
    shell:
        """
        python scripts/12_aggregate_agreement_plots.py \
        --input-tables {input}
        """

rule o13_aggregate_agreement_plots_largest_celltypes:
    input:
        tables=expand("res/{run_dir}/res/07_figure_3_and_s2/agreement_table_largest_celltypes.pkl", run_dir=RUN_DIRS),
        tables_perfect_only=expand("res/{run_dir}/res/07_figure_3_and_s2/agreement_table_largest_celltypes_perfect_only.pkl", run_dir=RUN_DIRS),
    output:
        "res/13_aggregated_plots_largest_celltypes/agreement_plot_largest_celltypes.svg",
        "res/13_aggregated_plots_largest_celltypes/agreement_plot_largest_celltypes_perfect_only.svg",
    resources:
        slurm_partition="cpu",
        mem="32G",
        runtime=60,
        ntasks=1,
    shell:
        """
        python scripts/13_aggregate_agreement_plots_largest_celltypes.py \
            --input-tables {input.tables} \
            --input-tables-perfect-only {input.tables_perfect_only} \
        """

rule o14_extract_DEGs:
    input:
        "dat/preprocessed_tissue_adt",
    output:
        "res/14_extract_DEGs/DEGs.csv",
        "res/14_extract_DEGs/DEGs.pkl",
        "res/14_extract_DEGs/DEG_frequencies.txt",
    resources:
        slurm_partition="gpu",
        gpu=1,
        mem="400G",
        runtime=60,
        ntasks=1,
    shell:
        """
        python scripts/14_extract_DEGs.py
        """


rule o15_aggregate_agreement_plots_tissue:
    input:
        tables=expand("res/{run_dir}/res/06b_figure_s3/agreement_table_by_tissue.pkl", run_dir=RUN_DIRS),
        tables_perfect_only=expand("res/{run_dir}/res/06b_figure_s3/agreement_table_by_tissue_perfect_only.pkl", run_dir=RUN_DIRS),
    output:
        "res/15_aggregated_plots_tissue/agreement_plot_by_tissue.svg",
        "res/15_aggregated_plots_tissue/agreement_plot_by_tissue_perfect_only.svg",
    resources:
        slurm_partition="cpu",
        mem="32G",
        runtime=60,
        ntasks=1,
    shell:
        """
        python scripts/15_aggregate_agreement_plots_tissue.py \
            --input-tables {input.tables} \
            --input-tables-perfect-only {input.tables_perfect_only} \
        """
